"""
Django settings for rafflee project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import datetime

from celery.schedules import crontab

env = environ.Env()
env.read_env(env.str('ENV_PATH', '.env'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!kicm4^w!8-36v8dzsvr!asurh=m9f=_ka#h2q&v8(k1yqg14#'

YOUTUBE_JSON = os.path.join(BASE_DIR, 'social_network/credentials/youtube_client.json')

EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')

EMAIL_HOST_USER = env('NO_REPLY_EMAIL')
EMAIL_HOST_PASSWORD = '{}'.format(env('EMAIL_PASSWORD'))
EMAIL_USE_TLS = True

TEMPLATES = os.path.join(BASE_DIR, 'templates')
EMAIL_TEMPLATES = os.path.join(BASE_DIR, 'templates/emails')

ADMIN_EMAIL = env('ADMIN_EMAIL')
CONTACT_EMAIL = env('CONTACT_EMAIL')
NO_REPLY_EMAIL = env('NO_REPLY_EMAIL')

FRONTEND_URL = env('FRONTEND_URL')
BACKEND_URL = env('BACKEND_URL')

TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')
TWILIO_SERVICE_SID = env('TWILIO_SERVICE_SID')
TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN')

FACEBOOK_ID = env('FACEBOOK_ID')
FACEBOOK_SECRET = env('FACEBOOK_SECRET')

GEOIP_PATH =os.path.join(BASE_DIR, 'geoip/')

MEDIA_ROOT = env('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'images'))
MEDIA_URL = env('MEDIA_URL', default="/images/")

if env('SWIFT_STATICFILES', default=False):
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATIC_URL = env('STATIC_URL')
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Users files storage

FOLDER_DOCS = 'images'
FOLDER_COMPANY_BILL = 'company_bill'
FOLDER_COMPANY_LOGO = 'company_logo'
FOLDER_CAMPAIGN_LOGO = 'campaign_logo'
FOLDER_USER_IMAGE = 'user_image'
FOLDER_IMG_GIVEWAY = 'giveway_img'

TWITTER_API_KEY = env('TWITTER_API_KEY')
TWITTER_API_SECRET_KEY = env('TWITTER_API_SECRET_KEY')
TWITTER_ACCESS_TOKEN = env('TWITTER_ACCESS_TOKEN')
TWITTER_ACCESS_TOKEN_SECRET = env('TWITTER_ACCESS_TOKEN_SECRET')

GOOGLE_ID_WEB = env("GOOGLE_ID_WEB")
GOOGLE_ID_IOS = env("GOOGLE_ID_IOS")
GOOGLE_ID_ANDROID = env("GOOGLE_ID_ANDROID")

INSTAGRAM_ID = env("INSTAGRAM_ID")
INSTAGRAM_SECRET = env("INSTAGRAM_SECRET")

TWITCH_ID = env("TWITCH_ID")
TWITCH_ID_MOBILE = env("TWITCH_ID_MOBILE")
TWITCH_SECRET_KEY = env("TWITCH_SECRET_KEY")
TWITCH_MOBILE_SECRET_KEY = env("TWITCH_MOBILE_SECRET_KEY")

SNAPCHAT_ID = env("SNAPCHAT_ID")
SNAPCHAT_SECRET = env("SNAPCHAT_SECRET")


# If you want to user a swift object storage to store user data,
# set SWIFT_USERFILES var to True and precise following vars
SWIFT_USERFILES = bool(
    env('SWIFT_USERFILES', default='false').lower() == 'true')

if SWIFT_USERFILES:
    OS_AUTH_URL = env('OS_AUTH_URL')
    OS_IDENTITY_API_VERSION = env('OS_IDENTITY_API_VERSION')
    OS_TENANT_NAME = env('OS_TENANT_NAME')
    OS_PASSWORD = env('OS_PASSWORD')
    OS_USERNAME = env('OS_USERNAME')
    OS_CONTAINER = env('OS_CONTAINER')
    OS_OPTIONS = {"region_name": env('OS_REGION')}

# HASH PASSWD
HASH_PASSWD = env('HASH_PASSWD')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ["*"]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] [{asctime}] [{module}]: {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, env('LOGFILE_PATH')),
            'formatter': 'verbose'
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
            'filename': os.path.join(BASE_DIR, env('LOGFILE_PATH')),
        },
    },
}

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'account',
    'company',
    'promotion',
    'phonenumber_field',
    'coupon',
    'social_network',
    'favorite',
    'analytics',
    'drf_yasg',
    'django_celery_beat',
    'report'
]

# CELERY STUFF
CELERY_BROKER_URL = 'redis://localhost:6380'
CELERY_RESULT_BACKEND = 'redis://localhost:6380'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {}

AUTH_USER_MODEL = 'account.MyUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'rafflee.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

WSGI_APPLICATION = 'rafflee.wsgi.application'

CORS_REPLACE_HTTPS_REFERER = env('CORS_REPLACE_HTTPS_REFERER', default=False)
CORS_ALLOW_CREDENTIALS = env('CORS_ALLOW_CREDENTIALS', default=True)
CORS_ORIGIN_ALLOW_ALL = env('CORS_ORIGIN_ALLOW_ALL', default=True)
CORS_ORIGIN_WHITELIST = env('CORS_ORIGIN_WHITELIST', default='').split()
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'withcredentials'
)

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('POSTGRES_DB_NAME'),
        'USER': env('POSTGRES_USERNAME'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST')
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': (
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_payload_handler',

#    'JWT_PAYLOAD_HANDLER':
#        'tools.jwt_functions.jwt_otp_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
         'rest_framework_jwt.utils.jwt_response_payload_handler',

#    'JWT_RESPONSE_PAYLOAD_HANDLER':
#        'tools.jwt_functions.jwt_response_payload_handler',

    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': 'tools.jwt_functions.jwt_get_secret_key',
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=31),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    # 'JWT_AUTH_COOKIE_DOMAIN': '.localhost:8081',
    'JWT_AUTH_COOKIE': 'JWT',
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
